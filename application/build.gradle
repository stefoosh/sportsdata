import org.gradle.plugins.ide.idea.model.IdeaLanguageLevel

buildscript {
    dependencies {
//		classpath "io.spring.gradle:dependency-management-plugin:${springGradleDependencyManagementPluginVersion}"
//		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
//		classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:{$spotbugsPluginVersion}"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id "com.github.spotbugs" version "${spotbugsPluginVersion}"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "io.spring.dependency-management" version "${springGradleDependencyManagementPluginVersion}"
    id "org.springframework.boot" version "${springBootVersion}"
}

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://dl.bintray.com/servicetalk/servicetalk/" }
}

gitProperties {
    keys = ['git.commit.id',
            'git.commit.id.abbrev',
            'git.commit.user.name',
            'git.commit.time',
            'git.build.host',
            'git.build.version',
            'git.remote.origin.url'
    ]
}

apply plugin: "org.springframework.boot"
springBoot {
    buildInfo()
}

apply plugin: "java"
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("$javaLanguageVersion".toInteger()))
    }
}

apply plugin: "idea"
idea {
    module {
        languageLevel = new IdeaLanguageLevel("${javaLanguageVersion}")
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}"
    implementation project(':library')
    implementation 'org.projectlombok:lombok:1.18.22'

    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
    testImplementation "org.testcontainers:mongodb:${testContainersVersion}"
    testImplementation "org.testcontainers:testcontainers-bom:${testContainersVersion}"
}

test {
    useJUnitPlatform()
    testLogging {
//		events = ["passed", "skipped", "failed", "standardOut", "standardError"]
//		exceptionFormat "full"
        events = ["passed", "skipped", "failed"]
    }
}

apply plugin: "checkstyle"
checkstyle {
    toolVersion = "${checkstyleVersion}"
    sourceSets = [sourceSets.main]
}

apply plugin: "com.github.spotbugs"
